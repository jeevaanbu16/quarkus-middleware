<#assign buildPlan = features["quarkus"].buildPlan>
<#assign repository = features["quarkus"].repository>

# [=application.name] Application


| appId  | [=application.appId]          |
|  --: | :-- |
| Build Project | [=buildPlan.project.url] |
| Repository | [=repository.link] |
| Clone Url | [=repository.url] |


## Overview

This application is built using the Quarkus framework, which is designed to make Java applications incredibly lightweight and easy to develop. 
It provides a fast startup time, low memory consumption, and excellent support for various Java technologies.

## Getting Started

Follow these steps to set up and run the application on your local machine.

### Prerequisites

Make sure you have the following tools installed:

- Java Development Kit (JDK) 17 or later
- Apache Maven
- Docker (optional, for containerization)

### Running the Application

1. Clone this repository to your local machine:

   ```sh
   git clone [=repository.url]
   cd [=application.appId]
   ```

2. Build and run the application using Maven:

   ```sh
   ./mvnw compile quarkus:dev
   ```

   This command will start the development mode, allowing you to make changes and see them instantly.

3. Access the application in your web browser:

   Open your web browser and navigate to `http://localhost:8080`. You should see the welcome page of your Quarkus application.

### Packaging and Running as a JAR

To package the application as a standalone JAR file and run it:

```sh
./mvnw clean package
java -jar target/[=application.appId]-1.0.0-SNAPSHOT-runner.jar
```

### Containerization (Optional)

You can also containerize your Quarkus application using Docker. Make sure you have Docker installed and running on your machine.

1. Build the Docker image:

   ```sh
   docker build -f src/main/docker/Dockerfile.jvm -t [=application.appId] .
   ```

2. Run the Docker container:

   ```sh
   docker run -i --rm -p 8080:8080 [=application.appId]
   ```

Now your Quarkus application is running within a Docker container.

## Project Structure

The project follows a standard Maven directory structure with additional Quarkus-related files:

- `src/main/java`: Java source code for your application.
- `src/main/resources`: Configuration files and resources.
- `src/main/docker`: Dockerfile for containerization.
- `pom.xml`: Maven project configuration.

<div style="font-size: x-small">(generated by DevOps 360)</div>
